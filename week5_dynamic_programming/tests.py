from change_dp import change
from primitive_calculator import compute_operations
from edit_distance import edit_distance
from lcs2 import lcs2
from lcs3 import lcs3
from random import randint
import unittest

class Week5Tests(unittest.TestCase):
    
    def test_change_dp(self):
        dp = [0] * 1001
        denoms = [1, 3, 4]

        for m in range(1, 1001):
            dp[m] = min(dp[m - d] for d in denoms if m - d >= 0) + 1

        for i in range(1001):
            self.assertEqual(change(i), dp[i])

    def test_compute_operations(self):
        ...

    def test_lcs2(self):
        self.assertEqual(lcs2([2,7,5],[2,5]),2),
        self.assertEqual(lcs2([7],[1,2,3,4]),0),
        self.assertEqual(lcs2([2,7,8,3],[5,2,8,7]),2),
        self.assertEqual(lcs2([-2,-7,-5],[-2,-5]),2),
        self.assertEqual(lcs2([-7],[-1,-2,-3,-4]),0),
        self.assertEqual(lcs2([-2,-7,-8,-3],[-5,-2,-8,-7]),2)
        self.assertEqual(lcs2([0],[0]),1)
        self.assertEqual(lcs2([1,2,3,4],[1,2,3,4]),4)
        self.assertEqual(lcs2([1,1,1,1],[1]),1)
        self.assertEqual(lcs2([1,1,1,1],[1,1,1,1]),4)
        l1, l2 = [n for n in range(1,1001)], [randint(int(-10e9), int(10e9)) for _ in range(1,1001)]
        self.assertEqual(lcs2(l1, l1), len(l1))
    
    def test_dedit_distance(self):
        self.assertEqual(edit_distance("short", "ports"), 3)
        self.assertEqual(edit_distance("ab", "ab"), 0)
        self.assertEqual(edit_distance("a", "b"), 1)



class TestLCS3(unittest.TestCase):
    """
        These test cases were generated by ChatGPT 
    """
    def test_empty(self):
        self.assertEqual(lcs3([], [], []), 0, "All sequences empty -> LCS = 0")

    def test_one_sequence_empty(self):
        self.assertEqual(lcs3([1, 2, 3], [1, 2, 3], []), 0, "One sequence empty -> LCS = 0")

    def test_identical_sequences(self):
        self.assertEqual(lcs3([1, 2, 3], [1, 2, 3], [1, 2, 3]), 3,
                         "All three sequences are identical -> full length")

    def test_no_common_subsequence(self):
        # No element in common
        self.assertEqual(lcs3([1, 2, 3], [4, 5, 6], [7, 8, 9]), 0,
                         "No elements match at all")

    def test_simple_case(self):
        # A small case where only '2' is common to all
        self.assertEqual(lcs3([1, 2, 3], [2, 4], [2, 5, 7]), 1,
                         "Only '2' is common in all three sequences")

    def test_longer_common_subsequence(self):
        # Common subsequence is [2, 3]
        self.assertEqual(lcs3([1, 2, 3, 4, 5], [2, 3, 7, 8], [2, 3, 9]), 2,
                         "Longest common subsequence is of length 2 ([2, 3])")

    def test_partial_overlap(self):
        # Common subsequence is [5, 7]
        seqA = [5, 7, 8, 1, 2]
        seqB = [0, 1, 5, 7, 9]
        seqC = [5, 7]
        self.assertEqual(lcs3(seqA, seqB, seqC), 2,
                         "Longest common subsequence is [5, 7]")

if __name__ == "__main__":
    unittest.main()